version: '3.8'

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: services/backend/Dockerfile
      target: runtime
    volumes:
      - ./services/backend:/app
      - /app/__pycache__
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-zeitwise}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - zeitwise-network

  # Qdrant Vector Search
  qdrant:
    image: qdrant/qdrant:v1.5.1
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - zeitwise-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:6333/readyz"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zeitwise-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # n8n workflow automation
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_EDITOR_BASE_URL=http://localhost:5678
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-your-secret-encryption-key}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME:-n8n}
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-postgres}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - DB_POSTGRESDB_PORT=5432
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - zeitwise-network
    depends_on:
      - postgres
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-zeitwise}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/init-db/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    networks:
      - zeitwise-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-zeitwise}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379:0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispass}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - zeitwise-network

  # PGAdmin (Web UI for PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - zeitwise-network

networks:
  zeitwise-network:
    driver: bridge
    name: zeitwise-network

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  n8n_data:
