version: '3.8'

services:
  # Backend API
  api:
    build:
      context: ../../
      dockerfile: infra/docker/backend.Dockerfile
      target: development
    volumes:
      - ../../services/backend:/app
      - /app/__pycache__
    ports:
      - "8000:8000"
    env_file:
      - ../../.env
    environment:
      - ENVIRONMENT=development
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - zeitwise-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-zeitwise}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    networks:
      - zeitwise-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-zeitwise}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - zeitwise-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Qdrant Vector Search
  qdrant:
    image: qdrant/qdrant:v1.7.4
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - zeitwise-network
    restart: unless-stopped

  # Supabase (local development)
  supabase:
    image: supabase/postgres:15.1.0.118
    environment:
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD:-your-super-secret-password}
      JWT_SECRET: ${SUPABASE_JWT_SECRET:-your-jwt-secret}
      ANON_KEY: ${SUPABASE_ANON_KEY:-your-anon-key}
      SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-your-service-role-key}
    ports:
      - "54321:5432"
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ../../infra/supabase/migrations:/docker-entrypoint-initdb.d/
    networks:
      - zeitwise-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379:0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispass}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - zeitwise-network

  # PGAdmin (Web UI for PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - zeitwise-network

networks:
  zeitwise-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  supabase_data:
